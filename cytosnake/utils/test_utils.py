"""
module: test_utils.py

test_utils.py contain additional functions that enhance testing capabilities, providing
extra functionality for conducting comprehensive and robust tests.
"""
import os
import pathlib
import shutil
from typing import Optional
from dataclasses import dataclass

import cytosnake

# setting test root folder path
TEST_ROOT_PATH = pathlib.Path(cytosnake.__path__[0]).parent / "tests"


@dataclass
class DataFiles:
    """Structured datatype representation that contains all files in a selected dataset

    Attributes:
    -----------
    metadata: str | list[str]
        metadata directory name
    plate_data: list[str]
        list of plate data (parquet or sqlite files)
    barcode : str
        barcode file name

    Returns
    -------
    DataFiles
        DataStructure representation of test dataset files
    """

    # required parameters
    dataset_dir: str | pathlib.Path

    # extracted files
    metadata: str | list[str] = None
    plate_data: str | list[str] = None
    barcode: str = None

    # extracting file paths and setting into dataclass attributes
    def __post_init__(self):
        self._extract_content_files()

    def _extract_content_files(self):
        """extracts all files within given dataset folder and sets the DataFile
        dataclass attributes

        Raises
        ------
        TypeError
            raised if dataset_dir is not a str or pathlib.Path object.
            raised if plate data is not parquet or sqlite file
        """
        # get all top level files
        if not isinstance(self.dataset_dir, (str, pathlib.Path)):
            raise TypeError(
                "dataset_dir must be a string or pathlib.Path object"
            )
        if isinstance(self.dataset_dir, str):
            self.dataset_dir = pathlib.Path(self.dataset_dir).resolve(
                strict=True
            )

        # get all files
        all_files = list(self.dataset_dir.glob("*"))

        # get data files
        plate_data = [
            str(fpath.name)
            for fpath in all_files
            if any(fpath.suffix == ext for ext in [".parquet", ".sqlite"])
        ]
        self.plate_data = plate_data

        # get metadata_dir
        meta_data_path = [
            str(fpath.name) for fpath in all_files if fpath.is_dir()
        ]
        self.metadata = (
            meta_data_path[0] if len(meta_data_path) == 1 else meta_data_path
        )

        # get barcode
        barcode_path = [
            str(fpath.name)
            for fpath in all_files
            if any(fpath.suffix == ext for ext in [".txt", ".csv"])
        ]
        self.barcode = (
            barcode_path[0] if len(barcode_path) == 1 else barcode_path
        ) if len(barcode_path) > 0 else None


def get_raised_error(traceback: str) -> str:
    """Parses traceback and attempts to obtain raised exception error.

    Traceback is parsed in this order:
    1. split by new lines
    2. grab the last line as it contains the raised exception and message
    3. split by ":" to separate exception name and exception message
    4. grab the first element since it contains that path to exception
    5. split by "." and grab last element, which is the exception name

    Parameters
    ----------
    traceback : str
        complete traceback generated by executing CLI

    Returns
    -------
    str
        name of raised exception error
    """

    # returns exception name, refer to function documentation to understand
    # the order of parsing the traceback to obtain exception name.
    return traceback.splitlines()[-1].split(":")[0].split(".")[-1]


def get_test_data_folder(test_data_name: str) -> DataFiles:
    """Gets single or multiple datasets. Users provide the name of the datasets
    that will be used in their tests

    Parameters/home/axiom/Projects/CytoSnake/cytosnake/utils/datasets
        name or names of datasets to be selected

    Returns
    -------
    DataFiles
        contains all files in a dataclass format

    Raises:
    -------
    FileNotFoundError
        Raised when the provided test_data_name is not a valid testing dataset.
    """

    # type checking
    if not isinstance(test_data_name, str):
        raise TypeError("`test_data_name` must be a string")

    # get testing dataset_path
    data_dir_path = (TEST_ROOT_PATH / "datasets").resolve(strict=True)
    sel_test_data = (data_dir_path / test_data_name).resolve(strict=True)

    # convert to DataFiles content
    data_files = DataFiles(sel_test_data)

    return data_files


def prepare_dataset(
    test_data_name: str,
    test_dir_path: pathlib.Path,
) -> DataFiles:
    """Main function to prepare dataset into testing datafolder.

    Parameters
    ----------
    test_data_name : str
        name of the testing dataset you want to use

    test_dir_path : pathlib.Path
        path to testing directory

    Returns
    -------
    DataFiles
        Structured data object that contains all the files within the selected dataset
    """
    # get dataset and transfer to testing directory
    datafiles = get_test_data_folder(test_data_name=test_data_name)
    shutil.copytree(
        datafiles.dataset_dir, str(test_dir_path), dirs_exist_ok=True
    )

    # change directory to the testing directory
    os.chdir(str(test_dir_path))

    return datafiles


def check_init_outputs(
    paths: DataFiles,
    test_dir: pathlib.Path,
    plate_data_ext: Optional[str] = "sqlite",
):
    """verifies if all the files are generated after executing a sucessfull `init` mode 
    run with CytoSnake.

    Parameters
    ----------
    paths : test_utils.DataFiles
        DataFile datastructure that contains all file inputs
    test_dir : pathlib.Path
        Path where the test is taken place
    plate_data_ext : Optional[str], optional
        plate data format, by default "sqlite"
    """
    # typpe checking
    if not isinstance(paths, DataFiles):
        raise TypeError(
            f"`paths` must be a DataFiles type, not: {type(paths)}"
        )
    if not isinstance(test_dir, pathlib.Path):
        raise TypeError(
            f"`test_dir` must be a pathlib.Path type, not: {type(test_dir)}"
        )
    if not isinstance(test_dir, pathlib.Path):
        raise TypeError(
            f"`plate_data_ext` must be a str type, not: {type(plate_data_ext)}"
        )

    # creating the paths to check
    data_folder = test_dir / "data"
    cytosnake_file = test_dir / ".cytosnake"
    metadata_in_datafolder = data_folder / paths.metadata
    all_plates = list(data_folder.glob("*.sqlite"))
    
    # if the barcode is not None, get the path to barcode and check
    if paths.barcode is not None:
        barcodes_in_datafolder = data_folder / paths.barcode
        print(paths.barcode)
        assert barcodes_in_datafolder.exists()

    # assert checks
    assert data_folder.exists()
    assert cytosnake_file.exists()
    assert metadata_in_datafolder.exists()
    assert all(
        [
            str(plate_data).endswith(f".{plate_data_ext}")
            for plate_data in all_plates
        ]
    )
