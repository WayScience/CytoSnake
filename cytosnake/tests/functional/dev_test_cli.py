
"""
module: test_cli.py

Description:

The test_cli.py module is a crucial part of the CytoSnake project, responsible for 
conducting functional tests on CytoSnake's Command Line Interface (CLI). These tests aim 
to ensure that the CLI functions correctly, handling both positive and negative 
scenarios effectively.

The purpose of this module is to verify that the CytoSnake CLI operates as expected and 
provides accurate results when interacting with various user parameters and modes. It 
validates that the CLI can handle different inputs, execute successfully in positive 
cases, and properly report errors in negative cases.

The test scenarios are categorized into two main types:

Positive Cases: 
These test cases validate the expected behavior of the CLI when 
provided with valid user parameters. The primary goal is to ensure that the CLI executes
successfully without errors and produces the correct output.

Negative Cases: 
These test cases simulate scenarios where invalid or inappropriate user parameters are 
provided. The objective is to confirm that the CLI can identify and handle errors 
appropriately, providing informative error messages to the user.
"""

from dataclasses import dataclass
import pytest
import pathlib
import shutil
import subprocess

# --------------
# helper functions
# --------------
@dataclass
class DataFiles:
    """Structured datatype representation that contains all files in a selected dataset
    
    Attributes:
    -----------
    metdata: str
        path to metdata directory
    plate_data: list[str]
        list of plate data (parque or sqlite files)
    

    """
    dataset_dir: str | pathlib.Path
    
    # extracted files
    metadata: str = None
    plate_data: list[str] = None
    barcode: str = None

    
    # extracting file paths and setting into dataclass attributes
    def __post__init__(self):
        self._extract_content_files()

    def _extract_content_files(self):
        """extracts all files within given dataset folder

        Raises
        ------
        TypeError
            raised if dataset_dir is not a str or pathlib.Path object.
            raised if plate data is not parquet or sqlite file
        """
        accepted_plate_ext = ("parquet", "sqlite")

        # get all top level files
        if not isinstance(self.dataset_dir, (str, pathlib.Path)):
            raise TypeError("dataset_dir must be a string or pathlib.Path object")
        if isinstance(self.dataset_dir, str):
            self.dataset_dir = pathlib.Path(self.dataset_dir).resolve(strict=True)

            
        # get all files
        all_files = list(self.dataset_dir.glob("*"))

        print(all_files)
        # NOTE: stopped here



def prepare_dataset(source_dir: pathlib.Path, test_dir_path: pathlib.Path) -> None:
    """Transports testing datasets into testing directory

    Parameters
    ----------
    test_dir_path : pathlib.Path
        _description_
    
    Returns
    -------
    None
        Testing files transported to testing directory
    """
    # un
    shutil.copytree(source_dir, test_dir_path)

def get_test_data_folder(test_data_name: str) -> pathlib.Path:
    """Gets single or multiple datasets. Users provide the name of the datasets 
    that will be used in their tests 

    Parameters
    ----------
    test_data_name : str | list[str]
        name or names of datasets to be selected

    Returns
    -------
    pathlib.Path
        return paths of the selected datasets

    Raises:
    -------
    FileNotFoundError
        Raised when the provided test_data_name is not a valid testing dataset.
    """
    
    # type checking
    if not isinstance(test_data_name, str):
        raise TypeError("`test_data_name` must be a string")
    
    # get testing dataset_path
    data_dir_path = pathlib.Path("datasets")
    sel_test_data = (data_dir_path / test_data_name).resolve(strict=True)

    return sel_test_data

def get_raised_error(traceback: str) -> str:
    """Parses traceback and attempts to obtain raised exception error.

    Traceback is parsed in this order:
    1. split by new lines
    2. grab the last line as it contains the raised exception and message
    3. split by ":" to separate exception name and exception message
    4. grab the first element since it contains that path to exception
    5. split by "." and grab last element, which is the exception name

    Parameters
    ----------
    traceback : str
        complete traceback generated by executing CLI

    Returns
    -------
    str
        return raised exception error
    """

    # returns exception name, refer to function documentation to understand
    # the order of parsing the traceback to obtain exception name.
    return traceback.splitlines()[-1].split(":")[0].split(".")[-1]

# ---------------
# PyTest Fixtures
# ---------------
@pytest.fixture
def testing_dir(tmp_path):
    """Creates a testing directory

    Note: Pytest will tear down tmp_path per test

    Parameters
    ----------
    tmp_path : pytest.fixture
        pytest deafault fixture value to be called when creating a temp dir.
    
    returns: 
    --------
    pathlib.Path
        Path pointing to temporary directory

    """
    return tmp_path / "testing_dir"

# ---------------
# Init Mode Tests
# ---------------

def test_barcode_logic_no_barcode_one_platemap(test_dir) -> None:
    """Positive case test: Expects a succesfful run.
    
    Test emulates a user using CytoSnake and using multiple plate
    
    Parameters:
    -----------
    test_dir: pytest.fixture
        Testing directory
    """